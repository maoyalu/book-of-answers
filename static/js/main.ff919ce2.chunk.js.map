{"version":3,"sources":["Home.js","Result.js","Ask.js","App.js","serviceWorker.js","index.js"],"names":["Home","props","className","onClick","Result","src","alt","text","Ask","allText","answers","useState","selectedAnswer","setSelectedAnswer","file","rawFile","XMLHttpRequest","open","onreadystatechange","readyState","status","responseText","split","send","readTextFile","type","rand","Math","floor","random","length","console","log","answer","App","start","setStart","role","aria-label","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"8TAgBeA,MAbf,SAAcC,GAEV,OACI,yBAAKC,UAAU,OAAOC,QAASF,EAAME,SACjC,mDACA,wBAAID,UAAU,WAAd,4BACA,uDACA,iF,MCGGE,MAVf,SAAgBH,GAEZ,OACI,yBAAKC,UAAU,UACX,yBAAKG,IAAI,cAAcC,IAAI,eAC3B,2BAAIL,EAAMM,Q,MCsCPC,MA1Cf,WAAgB,IAGRC,EACAC,EAJO,EAC+BC,mBAAS,IADxC,mBACNC,EADM,KACUC,EADV,KA+BX,OAzBA,SAAsBC,GAElB,IAAIC,EAAU,IAAIC,eAClBD,EAAQE,KAAK,MAAOH,GAAM,GAC1BC,EAAQG,mBAAqB,WACC,IAAvBH,EAAQI,aAEe,MAAnBJ,EAAQK,QAAqC,IAAnBL,EAAQK,SAEjCX,EAAUM,EAAQM,aAClBX,EAAUD,EAAQa,MAAM,SAIpCP,EAAQQ,KAAK,MASjBC,CAAa,eAGT,6BACI,uBAAGtB,UAAU,SAAb,YACA,8BAAWuB,KAAK,SAChB,6BAAM,4BAAQtB,QAAS,kBAZhB,WACX,IAAIuB,EAAOhB,EAAQiB,KAAKC,MAAMD,KAAKE,SAAWnB,EAAQoB,SACtDC,QAAQC,IAAIN,GACZb,EAAkBa,GASeO,KAAvB,eACN,uBAAG/B,UAAU,SAAb,UACA,kBAAC,EAAD,CAAQK,KAAMK,MCnBXsB,MAhBf,WAAgB,IAAD,EACWvB,oBAAS,GADpB,mBACRwB,EADQ,KACDC,EADC,KAGb,OACE,yBAAKlC,UAAU,OACb,0BAAMA,UAAU,eACbiC,EACG,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAMhC,QAAS,WAAOiC,GAAS,OAGrC,6CAAkB,0BAAMC,KAAK,MAAMC,aAAW,SAA5B,gBAAlB,cCLcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzB,QAAQyB,MAAMA,EAAMC,c","file":"static/js/main.ff919ce2.chunk.js","sourcesContent":["import React from 'react'\nimport './Home.css'\n\nfunction Home(props) {\n\n    return(\n        <div className=\"Home\" onClick={props.onClick}>\n            <h1>The BOOK of ANSWERS</h1>\n            <h1 className=\"TitleCN\">答案之书</h1>\n            <p>[Click to Ask Questions]</p>\n            <u>点击屏幕开始提问</u>\n        </div>\n    )\n\n}\n\nexport default Home;","import React from 'react';\nimport './Result.css'\n\nfunction Result(props) {\n\n    return(\n        <div className=\"Result\">\n            <img src=\"loading.gif\" alt=\"loading...\"/>\n            <p>{props.text}</p>\n        </div>\n    )\n}\n\nexport default Result","import React, {useState} from 'react';\nimport Result from './Result'\nimport './Ask.css'\n\nfunction Ask() {\n    let [selectedAnswer, setSelectedAnswer] = useState('')\n\n    var allText;\n    var answers; \n\n    function readTextFile(file)\n    {\n        var rawFile = new XMLHttpRequest();\n        rawFile.open(\"GET\", file, false);\n        rawFile.onreadystatechange = () => {\n            if(rawFile.readyState === 4)\n            {\n                if(rawFile.status === 200 || rawFile.status === 0)\n                {\n                    allText = rawFile.responseText;\n                    answers = allText.split(\"\\n\");\n                }\n            }\n        }\n        rawFile.send(null);\n    }\n\n    const answer = () => {\n        let rand = answers[Math.floor(Math.random() * answers.length)]\n        console.log(rand)\n        setSelectedAnswer(rand)\n    }\n\n    readTextFile('answers.txt')\n\n    return(\n        <div>\n            <p className=\"Label\">Question</p>\n            <textarea  type=\"text\" />\n            <br /><button onClick={() => answer()}>GET ANSWER!</button>\n            <p className=\"Label\">Answer</p>\n            <Result text={selectedAnswer}/>\n        </div>\n    )\n}\n\nexport default Ask","import React, {useState} from 'react';\nimport './App.css';\n\nimport Home from './Home'\nimport Ask from './Ask'\n\nfunction App() {\n  let [start, setStart] = useState(false);\n\n  return (\n    <div className=\"App\">\n      <main className=\"App-Content\">\n        {start\n          ? <Ask />\n          : <Home onClick={() => {setStart(true)}}/>\n        }\n      </main>\n      <footer>Made with <span role=\"img\" aria-label=\"heart\">❤️</span> by YALU</footer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}